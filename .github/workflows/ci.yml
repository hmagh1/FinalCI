name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cruddb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        volumes:
          - ./db:/docker-entrypoint-initdb.d:ro

      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üêò Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, memcached, xdebug

      - name: üõ† Set up .env for CI
        run: |
          echo "DB_HOST=127.0.0.1" > .env
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=cruddb" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASS=root" >> .env

      - name: üì¶ Install Composer dependencies
        run: composer install --no-progress --prefer-dist

      - name: üê¢ Wait for MySQL to be ready
        run: |
          for i in {1..12}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "‚úÖ MySQL is up!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 5
          done

      - name: üîç V√©rifie si la table users existe
        run: |
          mysql -h127.0.0.1 -uroot -proot -e "SHOW TABLES IN cruddb;" || true
          mysql -h127.0.0.1 -uroot -proot -e "SELECT * FROM cruddb.users LIMIT 1;" || true

      - name: üß™ Run PHPUnit tests with coverage
        run: |
          chmod +x vendor/bin/phpunit
          XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover coverage.xml

      - name: üì§ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: üö® Analyse statique avec SonarCloud (optionnel)
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: hmagh1_FinalCI
          SONAR_ORGANIZATION: hmagh1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üêõ Debug MySQL logs on failure
        if: failure()
        run: docker logs $(docker ps -a -q --filter ancestor=mysql:8.0)
