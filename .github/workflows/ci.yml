name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cruddb
        ports:
          - 3306:3306
        # Montre le dossier ./db contenant init.sql dans le conteneur pour initialiser la base
        volumes:
          - ./db:/docker-entrypoint-initdb.d:ro
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211

    steps:
      # 📥 Récupération du code source
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # 🐘 Installation de PHP avec les extensions requises
      - name: 🐘 Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, memcached, xdebug

      # 🛠 Génération du fichier .env pour la connexion à la base de données
      - name: 🛠 Set up .env for CI
        run: |
          echo "DB_HOST=127.0.0.1" > .env
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=cruddb" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASS=root" >> .env

      # 📦 Installation des dépendances via Composer
      - name: 📦 Install Composer dependencies
        run: composer install --no-progress --prefer-dist

      # 🐢 Attente que MySQL soit prêt
      - name: 🐢 Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "✅ MySQL is up!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 5
          done

      # 🔍 Affiche le contenu du fichier SQL de création de la table
      - name: 🔍 Debug: check db/init.sql
        run: |
          echo "📁 Listing db directory"
          ls -la db
          echo "📄 Showing content of init.sql"
          cat db/init.sql

      # 🧪 Lancement des tests PHPUnit avec couverture
      - name: 🧪 Run PHPUnit tests with coverage
        run: |
          XDEBUG_MODE=coverage php vendor/bin/phpunit --coverage-clover coverage.xml

      # 📤 Envoi de la couverture de code vers Codecov
      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true

      # 🐛 Affichage des logs MySQL en cas d'échec
      - name: 🐛 Debug MySQL logs on failure
        if: failure()
        run: docker logs $(docker ps -a -q --filter ancestor=mysql:8.0)
