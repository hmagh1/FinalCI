name: CI Pipeline with SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cruddb
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        volumes:
          - ./db:/docker-entrypoint-initdb.d:ro

      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐘 Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, memcached, xdebug

      - name: 🛠 Create .env for CI
        run: |
          echo "DB_HOST=127.0.0.1" > .env
          echo "DB_PORT=3307" >> .env
          echo "DB_NAME=cruddb" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASS=root" >> .env

      - name: 📦 Install Composer dependencies
        run: composer install --no-progress --prefer-dist

      - name: 🐢 Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h127.0.0.1 -P3307 -uroot -proot --silent; then
              echo "✅ MySQL is up!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 5
          done

      - name: ✅ Run PHPUnit with coverage
        run: |
          chmod +x vendor/bin/phpunit
          XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover coverage.xml

      - name: 🔎 Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
          sonar-scanner

      - name: 🐛 Debug MySQL logs if failed
        if: failure()
        run: docker logs $(docker ps -a -q --filter ancestor=mysql:8.0)
