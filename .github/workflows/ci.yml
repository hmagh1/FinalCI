name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Services n√©cessaires pour l'application
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cruddb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211

    steps:
      # 1Ô∏è‚É£ R√©cup√©rer le code depuis GitHub
      - name: üì• Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Installer PHP et ses extensions n√©cessaires
      - name: üêò Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, memcached, xdebug

      # 3Ô∏è‚É£ Cr√©er le fichier .env pour configurer la base de donn√©es
      - name: üõ† Set up .env for CI
        run: |
          echo "DB_HOST=127.0.0.1" > .env
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=cruddb" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASS=root" >> .env

      # 4Ô∏è‚É£ Installer les d√©pendances via Composer
      - name: üì¶ Install Composer dependencies
        run: composer install --no-progress --prefer-dist

      # 5Ô∏è‚É£ Attendre que MySQL soit pr√™t √† accepter les connexions
      - name: üê¢ Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "‚úÖ MySQL is up!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 5
          done

      # 6Ô∏è‚É£ Importer le fichier SQL dans la base de donn√©es manuellement
      - name: ‚öôÔ∏è Seed database (init.sql)
        run: |
          echo "‚ö° Seeding DB from db/init.sql"
          mysql -h127.0.0.1 -uroot -proot cruddb < db/init.sql

      # 7Ô∏è‚É£ Supprimer le cache de PHPUnit (protection contre tests obsol√®tes)
      - name: ‚ôªÔ∏è Clear PHPUnit cache
        run: rm -f .phpunit.result.cache

      # 8Ô∏è‚É£ Lancer les tests unitaires avec couverture de code
      - name: üß™ Run PHPUnit tests with coverage
        run: |
          chmod +x vendor/bin/phpunit || true
          XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover coverage.xml

      # 9Ô∏è‚É£ Uploader les r√©sultats de couverture vers Codecov
      - name: üì§ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true

      # üîç √âtape de d√©bogage des logs MySQL en cas d‚Äô√©chec
      - name: üêõ Debug MySQL logs on failure
        if: failure()
        run: docker logs $(docker ps -a -q --filter ancestor=mysql:8.0)
